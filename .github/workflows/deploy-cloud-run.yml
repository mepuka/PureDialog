name: Deploy to Google Cloud Run

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

env:
  # Core configuration - easy to adjust
  REGION: us-west1
  REPOSITORY: puredialog
  PULUMI_STACK: mepuka-org/pure-dialog-infra/dev
  NODE_VERSION: 22
  PNPM_VERSION: 9
  YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}

jobs:
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Enable pnpm
        run: |
          corepack enable
          corepack prepare pnpm@${{ env.PNPM_VERSION }} --activate
          pnpm --version

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Verify setup
        run: |
          echo "Project ID: ${{ secrets.GCP_PROJECT_ID }}"
          echo "Region: ${REGION}"
          echo "Repository: ${REPOSITORY}"
          echo "Commit SHA: ${{ github.sha }}"
          gcloud config list
          gcloud artifacts repositories describe ${REPOSITORY} \
            --location=${REGION} || echo "Repository might not exist yet"

      - name: Build and push container images
        run: |
          set -euo pipefail

          echo "Images to build:"
          echo "  - api:${{ github.sha }}"
          echo "  - worker-metadata:${{ github.sha }}"
          echo "  - worker-transcription:${{ github.sha }}"

          gcloud builds submit \
            --config=cloudbuild.yaml \
            --substitutions=_REGION=${REGION},_REPOSITORY=${REPOSITORY},COMMIT_SHA=${{ github.sha }} \
            --project=${{ secrets.GCP_PROJECT_ID }}

      - name: Install Pulumi dependencies
        working-directory: infra
        run: |
          pnpm install --frozen-lockfile

      - name: Configure Pulumi stack
        working-directory: infra
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          IMAGE_TAG: ${{ github.sha }}
          YOUTUBE_API_KEY: ${{ env.YOUTUBE_API_KEY }}
        run: |
          pulumi login

          pulumi stack select ${PULUMI_STACK} --non-interactive || {
            echo "Failed to select stack ${PULUMI_STACK}"
            echo "Available stacks:"
            pulumi stack ls
            exit 1
          }

          pulumi config set cloudrun:apiImage \
            ${REGION}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${REPOSITORY}/api:${IMAGE_TAG} \
            --stack ${PULUMI_STACK}

          pulumi config set cloudrun:metadataImage \
            ${REGION}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${REPOSITORY}/worker-metadata:${IMAGE_TAG} \
            --stack ${PULUMI_STACK}

          pulumi config set cloudrun:transcriptionImage \
            ${REGION}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${REPOSITORY}/worker-transcription:${IMAGE_TAG} \
            --stack ${PULUMI_STACK}

          pulumi config set --secret env:youtubeApiKey "${YOUTUBE_API_KEY}" --stack ${PULUMI_STACK}

      - name: Deploy infrastructure
        uses: pulumi/actions@v5
        with:
          work-dir: infra
          stack-name: ${{ env.PULUMI_STACK }}
          command: up
          args: --yes --non-interactive
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          GOOGLE_PROJECT: ${{ secrets.GCP_PROJECT_ID }}

      - name: Show deployment results
        if: success()
        working-directory: infra
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
        run: |
          echo "Deployment successful"
          echo "Stack outputs:"
          pulumi stack output --json | jq '.'
          echo ""
          echo "Service URLs:"
          pulumi stack output --json | jq -r 'to_entries[] | select(.key | contains("url")) | "\(.key): \(.value)"'
