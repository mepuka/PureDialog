import { Schema } from "effect"

/**
 * Speaker-related types and schemas
 */

export const SpeakerRole = Schema.Literal("host", "guest")
export type SpeakerRole = Schema.Schema.Type<typeof SpeakerRole>

/**
 * A structured representation of a single speaker identified in the media.
 * This is a core entity within the metadata with improved optional handling.
 */
export const Speaker = Schema.Struct({
  // A unique identifier for this speaker within the context of this job (e.g., "S1", "S2")
  // this can also be generated by the model if we want to do lower level dialog parsing
  // likely the case for beyond 1:1 interviews
  role: SpeakerRole,
  name: Schema.optional(Schema.String.pipe(
    Schema.minLength(1),
    Schema.annotations({
      description: "The speaker's name (required if provided)"
    })
  )),
  // Providing a structured object for affiliation is more extensible
  affiliation: Schema.optional(
    Schema.Struct({
      name: Schema.String.pipe(
        Schema.nonEmptyString(),
        Schema.annotations({
          description: "The organization or affiliation name"
        })
      ),
      url: Schema.optional(
        Schema.String.pipe(
          Schema.pattern(/^https?:\/\/.+/),
          Schema.annotations({
            description: "Valid HTTP/HTTPS URL for the affiliation"
          })
        )
      )
    }).annotations({
      description: "Organizational affiliation information for the speaker"
    })
  ),
  bio: Schema.optional(
    Schema.String.pipe(
      Schema.minLength(1),
      Schema.annotations({
        description: "Biographical information about the speaker"
      })
    )
  )
}).annotations({
  description: "Structured speaker information with role and optional details"
})
export type Speaker = Schema.Schema.Type<typeof Speaker>
